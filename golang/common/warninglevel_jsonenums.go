// generated by jsonenums -type=WarningLevel; DO NOT EDIT

package common

import (
	"encoding/json"
	"fmt"
)

var (
	_WarningLevelNameToValue = map[string]WarningLevel{
		"NORMAL":  NORMAL,
		"WARNING": WARNING,
		"ERROR":   ERROR,
	}

	_WarningLevelValueToName = map[WarningLevel]string{
		NORMAL:  "NORMAL",
		WARNING: "WARNING",
		ERROR:   "ERROR",
	}
)

func init() {
	var v WarningLevel
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_WarningLevelNameToValue = map[string]WarningLevel{
			interface{}(NORMAL).(fmt.Stringer).String():  NORMAL,
			interface{}(WARNING).(fmt.Stringer).String(): WARNING,
			interface{}(ERROR).(fmt.Stringer).String():   ERROR,
		}
	}
}

// MarshalJSON is generated so WarningLevel satisfies json.Marshaler.
func (r WarningLevel) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _WarningLevelValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid WarningLevel: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so WarningLevel satisfies json.Unmarshaler.
func (r *WarningLevel) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("WarningLevel should be a string, got %s", data)
	}
	v, ok := _WarningLevelNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid WarningLevel %q", s)
	}
	*r = v
	return nil
}
